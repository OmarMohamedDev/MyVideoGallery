// Code generated by dagger-compiler.  Do not edit.
package com.escorps.retrodagger.modules;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class MainModule$$ModuleAdapter extends ModuleAdapter<MainModule> {
  private static final String[] INJECTS = { "members/com.escorps.retrodagger.ui.main.MainActivity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public MainModule$$ModuleAdapter() {
    super(com.escorps.retrodagger.modules.MainModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, MainModule module) {
    bindings.contributeProvidesBinding("com.escorps.retrodagger.ui.main.MainView", new ProvideViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.escorps.retrodagger.ui.main.MainPresenter", new ProvidePresenterProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.escorps.retrodagger.adapter.RecyclerViewAdapter", new ProvideRecyclerViewAdapterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.escorps.retrodagger.ui.main.MainView>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.escorps.retrodagger.ui.main.MainView>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideViewProvidesAdapter extends ProvidesBinding<com.escorps.retrodagger.ui.main.MainView>
      implements Provider<com.escorps.retrodagger.ui.main.MainView> {
    private final MainModule module;

    public ProvideViewProvidesAdapter(MainModule module) {
      super("com.escorps.retrodagger.ui.main.MainView", IS_SINGLETON, "com.escorps.retrodagger.modules.MainModule", "provideView");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.escorps.retrodagger.ui.main.MainView>}.
     */
    @Override
    public com.escorps.retrodagger.ui.main.MainView get() {
      return module.provideView();
    }
  }

  /**
   * A {@code Binding<com.escorps.retrodagger.ui.main.MainPresenter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.escorps.retrodagger.ui.main.MainPresenter} and its
   * dependencies.
   *
   * Being a {@code Provider<com.escorps.retrodagger.ui.main.MainPresenter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePresenterProvidesAdapter extends ProvidesBinding<com.escorps.retrodagger.ui.main.MainPresenter>
      implements Provider<com.escorps.retrodagger.ui.main.MainPresenter> {
    private final MainModule module;
    private Binding<com.escorps.retrodagger.ui.main.MainView> mainView;
    private Binding<com.escorps.retrodagger.interactors.FindItemsInteractor> findItemsInteractor;

    public ProvidePresenterProvidesAdapter(MainModule module) {
      super("com.escorps.retrodagger.ui.main.MainPresenter", IS_SINGLETON, "com.escorps.retrodagger.modules.MainModule", "providePresenter");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      mainView = (Binding<com.escorps.retrodagger.ui.main.MainView>) linker.requestBinding("com.escorps.retrodagger.ui.main.MainView", MainModule.class, getClass().getClassLoader());
      findItemsInteractor = (Binding<com.escorps.retrodagger.interactors.FindItemsInteractor>) linker.requestBinding("com.escorps.retrodagger.interactors.FindItemsInteractor", MainModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(mainView);
      getBindings.add(findItemsInteractor);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.escorps.retrodagger.ui.main.MainPresenter>}.
     */
    @Override
    public com.escorps.retrodagger.ui.main.MainPresenter get() {
      return module.providePresenter(mainView.get(), findItemsInteractor.get());
    }
  }

  /**
   * A {@code Binding<com.escorps.retrodagger.adapter.RecyclerViewAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.escorps.retrodagger.adapter.RecyclerViewAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRecyclerViewAdapterProvidesAdapter extends ProvidesBinding<com.escorps.retrodagger.adapter.RecyclerViewAdapter>
      implements Provider<com.escorps.retrodagger.adapter.RecyclerViewAdapter> {
    private final MainModule module;

    public ProvideRecyclerViewAdapterProvidesAdapter(MainModule module) {
      super("com.escorps.retrodagger.adapter.RecyclerViewAdapter", IS_SINGLETON, "com.escorps.retrodagger.modules.MainModule", "provideRecyclerViewAdapter");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.escorps.retrodagger.adapter.RecyclerViewAdapter>}.
     */
    @Override
    public com.escorps.retrodagger.adapter.RecyclerViewAdapter get() {
      return module.provideRecyclerViewAdapter();
    }
  }
}
